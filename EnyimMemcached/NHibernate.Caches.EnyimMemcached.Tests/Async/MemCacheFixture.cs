//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Threading;
using log4net.Config;
using NHibernate.Cache;
using NUnit.Framework;

namespace NHibernate.Caches.EnyimMemcached.Tests
{
	using System.Threading.Tasks;
	[TestFixture]
	public class MemCacheFixtureAsync
	{
		private Dictionary<string, string> props;
		private ICacheProvider provider;

		[OneTimeSetUp]
		public void FixtureSetup()
		{
			XmlConfigurator.Configure();
			props = new Dictionary<string, string> {{"compression_enabled", "false"}, {"expiration", "20"}};
			provider = new MemCacheProvider();
			provider.Start(props);
		}

		[OneTimeTearDown]
		public void FixtureStop()
		{
			provider.Stop();
		}

		[Test]
		public async Task TestClearAsync()
		{
			string key = "key1";
			string value = "value";

			ICache cache = provider.BuildCache("nunit", props);
			Assert.IsNotNull(cache, "no cache returned");

			// add the item
			await (cache.PutAsync(key, value, CancellationToken.None));
			Thread.Sleep(1000);

			// make sure it's there
			object item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNotNull(item, "couldn't find item in cache");

			// clear the cache
			await (cache.ClearAsync(CancellationToken.None));

			// make sure we don't get an item
			item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNull(item, "item still exists in cache");
		}

		[Test]
		public async Task TestNullKeyGetAsync()
		{
			ICache cache = new MemCacheClient();
			await (cache.PutAsync("nunit", "value", CancellationToken.None));
			Thread.Sleep(1000);
			object item = await (cache.GetAsync(null, CancellationToken.None));
			Assert.IsNull(item);
		}

		[Test]
		public void TestNullKeyPutAsync()
		{
			ICache cache = new MemCacheClient();
			Assert.ThrowsAsync<ArgumentNullException>(() => cache.PutAsync(null, null, CancellationToken.None));
		}

		[Test]
		public void TestNullKeyRemoveAsync()
		{
			ICache cache = new MemCacheClient();
			Assert.ThrowsAsync<ArgumentNullException>(() => cache.RemoveAsync(null, CancellationToken.None));
		}

		[Test]
		public void TestNullValuePutAsync()
		{
			ICache cache = new MemCacheClient();
			Assert.ThrowsAsync<ArgumentNullException>(() => cache.PutAsync("nunit", null, CancellationToken.None));
		}

		[Test]
		public async Task TestPutAsync()
		{
			string key = "key1";
			string value = "value";

			ICache cache = provider.BuildCache("nunit", props);
			Assert.IsNotNull(cache, "no cache returned");

			Assert.IsNull(await (cache.GetAsync(key, CancellationToken.None)), "cache returned an item we didn't add !?!");

			await (cache.PutAsync(key, value, CancellationToken.None));
			Thread.Sleep(1000);
			object item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNotNull(item);
			Assert.AreEqual(value, item, "didn't return the item we added");
		}

		[Test]
		public async Task TestRegionsAsync()
		{
			string key = "key";
			ICache cache1 = provider.BuildCache("nunit1", props);
			ICache cache2 = provider.BuildCache("nunit2", props);
			string s1 = "test1";
			string s2 = "test2";
			await (cache1.PutAsync(key, s1, CancellationToken.None));
			await (cache2.PutAsync(key, s2, CancellationToken.None));
			Thread.Sleep(1000);
			object get1 = await (cache1.GetAsync(key, CancellationToken.None));
			object get2 = await (cache2.GetAsync(key, CancellationToken.None));
			Assert.IsFalse(get1 == get2);
		}

		[Test]
		public async Task TestRemoveAsync()
		{
			string key = "key1";
			string value = "value";

			ICache cache = provider.BuildCache("nunit", props);
			Assert.IsNotNull(cache, "no cache returned");

			// add the item
			await (cache.PutAsync(key, value, CancellationToken.None));
			Thread.Sleep(1000);

			// make sure it's there
			object item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNotNull(item, "item just added is not there");

			// remove it
			await (cache.RemoveAsync(key, CancellationToken.None));

			// make sure it's not there
			item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNull(item, "item still exists in cache");
		}

		[Test]
		public async Task TestRemove144Async()
		{
			string key = "key1";
			string value = "value";

			//memcached 1.4+ drops support for expiration time specified for Delete operations
			//therefore if you install memcached 1.4.4 this test will fail unless corresponding fix is implemented in MemCacheClient.cs
			//the test will fail because Remove won't actually delete the item from the cache!
			//the error you will see in the log is: "Error deleting key: nunit@key1.  Server response: CLIENT_ERROR bad command line format.  Usage: delete <key> [noreply]"

			//Now, Memcached.ClientLibrary incorrectly divides expiration time for Delete operation by 1000
			//(for Add and Set operations the expiration time is calculated correctly)
			//that's why we need to set expiration to 20000, otherwise it will be treated as 20ms which is too small to be sent to server (the minimum value is 1 second)
			props["expiration"] = "20000";

			//disabling lingering delete will cause the item to get immediately deleted
			//this parameter is NEW and the code to make it work is part of the proposed fix
			props.Add("lingering_delete_disabled", "true");

			ICache cache = provider.BuildCache("nunit", props);
			Assert.IsNotNull(cache, "no cache returned");

			// add the item
			await (cache.PutAsync(key, value, CancellationToken.None));
			Thread.Sleep(1000);

			// make sure it's there
			object item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNotNull(item, "item just added is not there");

			// remove it
			await (cache.RemoveAsync(key, CancellationToken.None));

			// make sure it's not there
			item = await (cache.GetAsync(key, CancellationToken.None));
			Assert.IsNull(item, "item still exists in cache");
		}
	}
}
