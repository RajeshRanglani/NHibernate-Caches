<?xml version="1.0" ?>
<project xmlns="http://nant.sf.net/release/0.85/nant.xsd">

  <property name="framework.family" value="${framework::get-family(framework::get-target-framework())}"/>
  <property name="framework.version" value="${framework::get-version(framework::get-target-framework())}"/>

  <property name="folders.lib" value="../Lib/${framework.family}/${framework.version}" />
  <property name="key.file" value="../NHibernate.Caches.snk" />

  <property name="nant-version.current" value="${assemblyname::get-version(assembly::get-name(nant::get-assembly()))}" />
  <property name="nant-version.required" value="0.85.2478.0" />
  <!-- Nant 0.85 release version -->
  <property name="nant-version.beta1_086" value="0.86.2898.0" />
  <!-- Nant 0.86 Beta 1 -->
  <!--
      Path to the folder that contain the external assemblies.  For net-2.0 the values will
      be lib, lib/net, and lib/net/2.0 respectively.
  -->
  <property name="lib.dir" value="lib" dynamic="true" />
  <property name="lib.family.dir" value="${path::combine(lib.dir, framework::get-family(framework::get-target-framework()))}" dynamic="true" />
  <if test="${nant-version.current != nant-version.beta1_086 or framework::get-target-framework() != 'net-4.0'}">
    <property name="lib.framework.dir" value="${path::combine(lib.family.dir, version::to-string(framework::get-version(framework::get-target-framework())))}" dynamic="true" />
  </if>

  <!-- This is used only for build folder -->
  <!-- TODO: Either remove or refactor to use NHibernate.props -->
  <property name="project.version" value="5.0.0" overwrite="false" />

  <!-- named project configurations -->
  <target name="set-debug-project-configuration" description="Perform a 'debug' build">
    <property name="build.release" value="false" />
    <property name="build.debug" value="true" />
    <property name="build.name" value="NHibernate-Caches-${project.version}-${project.config}" />
  </target>

  <target name="set-release-project-configuration" description="Perform a 'release' build">
    <property name="build.release" value="true" />
    <property name="build.debug" value="pdbonly" />
    <property name="build.name" value="NHibernate-Caches-${project.version}" />
  </target>

  <target name="set-project-configuration">
    <property name="project.config" value="debug" overwrite="false" />
    <if test="${not(target::exists('set-' + project.config + '-project-configuration'))}">
      <fail message="Unknown configuration: '${project.config}'" />
    </if>

    <call target="set-${project.config}-project-configuration" />

    <property name="build.root.dir" value="${root.dir}/build/${build.name}" />
    <property name="build.dir" value="${build.root.dir}" />
    <property name="bin.dir" value="${build.dir}/bin/${nant.settings.currentframework}" />
  </target>

  <target name="init" depends="set-project-configuration">
    <property name="folders.build" value="${bin.dir}" />
    <property name="tools.dir" value="${root.dir}/Tools" />
    <mkdir dir="${folders.build}"/>
  </target>

  <target name="copy-common-reference" depends="init">
    <copy todir="${folders.build}" flatten="true">
      <fileset>
        <include name="${folders.lib}/NHibernate.dll" />
        <include name="${folders.lib}/Iesi.Collections.dll" />
        <include name="${folders.lib}/log4net.dll" />
        <include name="${folders.lib}/nunit.framework.dll" />
      </fileset>
    </copy>
  </target>
  
  <target name="bin-pack-common">
    <property name="bin-pack.tmpdir" value="${build.dir}/tmp-bin" />
    <property name="bin-pack.project.deploy" value="${bin-pack.tmpdir}/${bin-pack.project.name}" />
    <mkdir dir="${bin-pack.project.deploy}"/>
    <copy file="${root.dir}/NHibernate.Caches.snk" todir="${bin-pack.project.deploy}"/>
    <copy file="${folders.build}/NHibernate.Caches.${bin-pack.project.name}.dll" todir="${bin-pack.project.deploy}"/>
  </target>

  <target name="common.compile-all" depends="init copy-common-reference">
    <exec program="${path::combine(tools.dir, 'dotnet.cmd')}" verbose="true">
      <arg value="${root.dir}/NHibernate.Caches.Everything.sln" />
      <arg value="/p:OutputPath=&quot;${path::get-full-path(folders.build)}&quot;" />
      <arg value="/p:Platform=&quot;Any CPU&quot;" />
      <arg value="/p:Configuration=&quot;Debug&quot;" if="${build.debug == 'true'}" />
      <arg value="/p:Configuration=&quot;Release&quot;" if="${build.release == 'true'}" />
      <arg value="/t:Restore" />
      <arg value="/t:Rebuild" />
      <arg value="/v:q" />
      <arg value="/m" />
    </exec>
  </target>
</project>
